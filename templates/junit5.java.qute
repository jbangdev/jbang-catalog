///usr/bin/env jbang "$0" "$@" ; exit $?

//DEPS org.junit.jupiter:junit-jupiter-api:5.7.2
//DEPS org.junit.jupiter:junit-jupiter-engine:5.7.2
//DEPS org.junit.platform:junit-platform-launcher:1.7.2

//SOURCES {scriptName}.java

import org.junit.jupiter.api.Test;
import org.junit.platform.launcher.Launcher;
import org.junit.platform.launcher.LauncherDiscoveryRequest;
import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;
import org.junit.platform.launcher.core.LauncherFactory;
import org.junit.platform.launcher.listeners.SummaryGeneratingListener;
import org.junit.platform.launcher.listeners.TestExecutionSummary;
import org.junit.platform.launcher.listeners.TestExecutionSummary.Failure;

import static java.lang.System.out;
import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;

// JUnit5 Test class for {scriptName}
public class {baseName} {

    // Run all Unit tests with JBang with ./{baseName}.java
    public static void main(final String... args) {
        final LauncherDiscoveryRequest request =
                LauncherDiscoveryRequestBuilder.request()
                        .selectors(selectClass({baseName}.class))
                        .build();
        final Launcher launcher = LauncherFactory.create();
        final SummaryGeneratingListener generatingListener = new SummaryGeneratingListener();
        launcher.execute(request, generatingListener);
        out.println(summary(generatingListener.getSummary()));
        // The test summary can also be printed with:
        //generatingListener.getSummary().printTo(new PrintWriter(out));
    }

    // Define each Unit test here and run them separately in the IDE
    @Test
    public void test() {
    }

    private static String summary(final TestExecutionSummary summary) {
        final StringBuilder builder = new StringBuilder();
        builder.append("Results:")
                .append('\n')
                .append('\n');
        if (summary.getTestsFailedCount() > 0) {
            builder.append("Failed tests:")
                    .append('\n');
            for (final Failure failure : summary.getFailures()) {
                builder.append('\t')
                        .append(failure.getTestIdentifier() + " " + failure.getException().getMessage());
            }
            builder.append('\n')
                    .append('\n');
        }

        final String message = String.format(
                "Tests run: %d, Failure: %d, Skipped: %d",
                summary.getTestsStartedCount(),
                summary.getTestsFailedCount(),
                summary.getTestsSkippedCount());
        builder.append(message);
        return builder.toString();
    }
}
